name: .NET Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SOLUTION_FILE: src/ProductManagement.sln

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build and Run static code analysis
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore -warnaserror
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    - name: Install dotnet-coverage
      run: dotnet tool install -g dotnet-coverage      

    - name: Run tests with coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y jq        
        dotnet test ${{ env.SOLUTION_FILE }} --no-restore --verbosity normal --logger trx --collect "Code Coverage;Format=cobertura" --results-directory ./TestResults
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1      

    - name: List test results directory
      run: ls -R ./TestResults

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: ./TestResults/**/*.trx
        reporter: dotnet-trx

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Test Results
        path: ./TestResults/**/*.cobertura.xml 

    - name: Display coverage summary
      run: |
        echo "## Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "The code coverage report can be downloaded from the artifacts section." >> $GITHUB_STEP_SUMMARY

    # - name: Parse coverage report
    #   id: coverage
    #   run: |       
    #     COVERAGE_FILE=./TestResults/coverage.cobertura.xml
    #     if [ -z "$COVERAGE_FILE" ]; then
    #       echo "Coverage files not found."
    #       exit 1
    #     fi
    #     COVERAGE_PERCENTAGE=$(cat $COVERAGE_FILE | jq '.[] | select(.name == "Line") | .coveredpercent')
    #     echo "Coverage Percentage: $COVERAGE_PERCENTAGE"
    #     echo "COVERAGE_PERCENTAGE=$COVERAGE_PERCENTAGE" >> $GITHUB_ENV

    # - name: Fail if coverage is below 50%
    #   if: ${{ env.COVERAGE_PERCENTAGE }} < 50
    #   run: |
    #     echo "Code coverage is below 50%. Failing the workflow."
    #     exit 1
